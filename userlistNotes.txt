// controller
const usersListController = async (req, res) => {
  var response = {};
  const {
    usersId,
    userName,
    email,
    mobile,
    userStatus,
    userType,
    fromCreatedDate,
    tillCreatedDate,
    fromUpdatedDate,
    tillUpdatedDate,
    createdBy,
    updatedBy,
    sortBy,
    sortOrder,
    page,
    limit,
  } = req.query;
  const details = await usersGetAllRepository(
    usersId,
    userName,
    email,
    mobile,
    userStatus,
    userType,
    fromCreatedDate,
    tillCreatedDate,
    fromUpdatedDate,
    tillUpdatedDate,
    createdBy,
    updatedBy,
    sortBy,
    sortOrder,
    page,
    limit
  );
  if (details) {
    response.message = "Successfully retrieved";
    response.data = details;
    res.send(response);
  } else {
    response.message = "Cannot retrieved";
    res.status(404).send(response);
  }
};

/*******************REPOSITORY*****************
const usersGetAllRepository = async (
  usersId,
  userName,
  email,
  mobile,
  userStatus,
  userType,
  fromCreatedDate,
  tillCreatedDate,
  fromUpdatedDate,
  tillUpdatedDate,
  createdBy,
  updatedBy,
  sortBy,
  sortOrder,
  page,
  limit
) => {
  var usersArray = [];
  try {
    //changed the date format at date of birth
    var sqlQuery = "select * from tableName where 1=1 "; // get the list
    // add on filters wih if conditions ..getting these requests from  req.query
    if (usersId) {
      sqlQuery += " and users_id=" + makeString(usersId);
    }

    if (userName) {
      sqlQuery += " and uname like '%" + userName + "%'";
    }
    if (email) {
      sqlQuery += " and email=" + makeString(email);
    }

    if (mobile) {
      sqlQuery += " and mnumber=" + makeString(mobile);
    }
    if (userStatus) {
      sqlQuery += " and ustatus=" + makeString(userStatus);
    }
    if (userType) {
      sqlQuery += " and user_type=" + makeString(userType);
    }

    if (fromCreatedDate) {
      sqlQuery += " and created_date >= '" + fromCreatedDate + "'";
    }
    if (tillCreatedDate) {
      sqlQuery += " and created_date <= '" + tillCreatedDate + " 23:59:59'";
    }
    if (fromUpdatedDate) {
      sqlQuery += " and updated_date >='" + fromUpdatedDate + "'";
    }
    if (tillUpdatedDate) {
      sqlQuery += " and updated_date <='" + tillUpdatedDate + " 23:59:59'";
    }
    if (createdBy) {
      sqlQuery += " and created_by=" + makeString(createdBy);
    }
    if (updatedBy) {
      sqlQuery += " and updated_by=" + makeString(updatedBy);
    }
    // sorting order by
    if (sortBy) {
      let order = 0;
      if (sortBy === "referralId") {
        sqlQuery += " order by referral_id";
      } else if (sortBy === "usersId") {
        sqlQuery += " order by users_id";
      } else if (sortBy === "userName") {
        sqlQuery += " order by uname";
      } else if (sortBy === "email") {
        sqlQuery += " order by email";
      } else if (sortBy === "mobile") {
        sqlQuery += " order by mnumber";
      } else if (sortBy === "userStatus") {
        sqlQuery += " order by ustatus";
      } else if (sortBy === "userType") {
        sqlQuery += " order by user_type";
      }
      console.log(sortOrder);
      if (sortOrder) {
        if (sortOrder == 1) {
          order = 1;
        }
      }

      sqlQuery += order == 0 ? " asc" : " desc";
    }
    //PAGINATION AND LIMIT USING PAGE AND OFFSET
    // BY  DEFAULT THE PAGE =0 AND LIMIT=10

    var newLimit = 10;

    if (limit != null) newLimit = limit;

    sqlQuery += " LIMIT " + newLimit + "";

    if (page) {
      sqlQuery += " OFFSET " + newLimit * page + "";
    } else {
      sqlQuery += " OFFSET 0";
    }

    console.log(sqlQuery);
    var usersList = await runQuery(sqlQuery);
    for (var i = 0; i < usersList.length; i++) {
      var userViewModel = new UserViewModel();
      const user = usersList[i];
      userViewModel.fill(
        (usersId = user.users_id),
        (userName = user.uname),
        (email = user.email),
        (mobile = user.mnumber),
        (userStatus = user.ustatus),
        (profilePic = user.profile_pic),
        (dob = user.dob),
        (createdDate = user.created_date),
        (createdBy = user.created_by),
        (updatedDate = user.updated_date),
        (updatedBy = user.updated_by)
      );
      usersArray.push(userViewModel);
    }
    return usersArray;
  } catch (error) {
    console.log(error);
  }
};

///************************   MODEL  ******************************
class UserViewModel {
  usersId = null;
  userName = null;
  email = null;
  mobile = null;
  userStatus = null;
  profilePic = null;
  dob = null;
  createdDate = null;
  createdBy = null;
  updatedDate = null;
  updatedBy = null;

  fill(
    usersId,
    userName,
    email,
    mobile,
    userStatus,
    profilePic,
    dob,
    createdDate,
    createdBy,
    updatedDate,
    updatedBy
  ) {
    this.usersId = usersId;
    this.userName = userName;
    this.email = email;
    this.mobile = mobile;
    this.userStatus = userStatus;
    this.profilePic = profilePic;
    this.dob = dob;
    this.createdDate = createdDate;
    this.createdBy = createdBy;
    this.updatedDate = updatedDate;
    this.updatedBy = updatedBy;
  }
}

module.exports = {
  UserViewModel,
};
//***************************************************************
save for user list all details
 userId,
  fullName,
  email,
  phoneNumber,
  userName,
  userType,
  userStatus,
  createdDate,
  updatedDate,
  sortBy,
  sortOrder,
  page,
  limit,
) => {
  var residentArray = []
  try {
    var sqlQuery = 'select * from resident where 1=1 '
    if (residentId) {
      sqlQuery += " and user_id='" + userId + "'"
    }
    if (centreId) {
      sqlQuery += " and full_name='" + fullName + "'"
    }
    if (active) {
      sqlQuery += " and email='" + email + "'"
    }
    if (nurseId) {
      sqlQuery += " and phone_number='" + phoneNumber + "'"
    }
    if (gender) {
      sqlQuery += " and username='" + userName + "'"
    }
    if (createdDate) {
      sqlQuery += " and user_type='" + userType + "'"
    }

    if (sortBy) {
      let order = 0
      if (sortBy === 'userId') {
        sqlQuery += ' order by user_id'
      } else if (sortBy === 'email') {
        sqlQuery += ' order by email'
      } else if (sortBy === 'userName') {
        sqlQuery += ' order by username'
      } else if (sortBy === 'userType') {
        sqlQuery += ' order by user_type'
      }
      if (sortOrder) {
        if (sortOrder == 1) {
          order = 1
        }
      }

      sqlQuery += order == 0 ? ' asc' : ' desc'
    }
    //PAGINATION AND LIMIT USING PAGE AND OFFSET
    // BY  DEFAULT THE PAGE =0 AND LIMIT=10
    var newLimit = 10
    if (limit != null) newLimit = limit
    sqlQuery += ' LIMIT ' + newLimit + ''
    if (page) {
      sqlQuery += ' OFFSET ' + newLimit * page + ''
    } else {
      sqlQuery += ' OFFSET 0'
    }

    var getdetails = await runQuery(sqlQuery)
    for (var i = 0; i < getdetails.length; i++) {
      var model = new residentModel()
      var array = getdetails[i]
      model.fill(
        (residentId = array.resident_id),
        (residentName = array.name),
        (residentGender = array.gender),
        (residentAge = array.age),
        (weight = array.weight),
        (active = array.active),
        (residentPhone = array.number),
        (centreId = array.centre_id),
        (nurseId = array.nurse_id),
        (residentAddress = array.address),
        (createdDate = array.created_date),
      )

      residentArray.push(model)
    }
    return residentArray
  } catch (error) {
    console.log(error)
  }
  *************************************************************************************************